{"name":"Casus","tagline":"Just another Randomizer Library but cooler!","body":"Casus\r\n===================\r\n> Just another Randomizer Library but cooler! With many out of the box features and support for 'Cryptographically \r\n> Secure Pseudo Random Number Generators' (CSPRNGs) provided by MCrypt and/or OpenSSL\r\n\r\n#Installation\r\nThe easiest way to install Casus for use in your own projects is through composer. You could manually download the \r\nfiles and use an alternative [psr-4](http://www.php-fig.org/psr/psr-4/) compatible autoloader to autoload the file \r\nin the `src` directory but this is not recommended and highly discouraged.\r\n\r\n## Through composer.json File\r\nAdd this line in your `composer.json` file and run `composer install` on the command line\r\n```JSON\r\n\"require\": {\r\n    \"solidew/casus\": \"*\"\r\n}\r\n```\r\n\r\n## Through the command line\r\nJust run in your project directory\r\n```\r\ncomposer require solidew/casus\r\n```\r\n\r\n\r\n#Usage\r\nBasically all you do is instantiate an object of the Casus Class and you're good to go!\r\n\r\n```PHP\r\n<?php\r\n//Include the Composer Autoloader\r\ninclude \"vendor/autoload.php\";\r\n\r\n$casus = new \\solidew\\Casus\\Casus();\r\necho $casus->integer();\r\n```\r\nThe above example will out put a number between `0` and `PHP_INT_MAX` of your PHP installation.\r\n\r\nThe casus class actually forwards all method calls to the generator instance, thus you could, if you prefer to, get the generator instance and call methods directly on it. Like:\r\n```PHP\r\n<?php\r\n$casus = new \\solidew\\Casus\\Casus();\r\n$random_generator = $casus->getGenerator();\r\necho $random_generator->integer();\r\n```\r\n#Methods\r\n## Method List\r\n- [integer](#integer-min-max--secure) - Generates a random integer\r\n- [float](#float-min-max-precision--secure) - Generates a random floating point number\r\n- [boolean](#boolean-secure) - Generates a random boolean value\r\n- [alpha](#alpha-length-case_randomization--secure) - Generates a random string with alphabets\r\n- [alphanum](#alphanum-length-case_randomization--secure) - Generates a random string with alphabets and numbers\r\n- [asciiRange](#asciirange-length-ranges--secure) - Generates a random string from a range in the ascii table\r\n- [string](#string-length-charset--secure) - Generates a random string from a character set\r\n- [integerArray](#integerarray-min-max-length--secure) - Generates an array of random Integers\r\n- [floatArray](#floatarray-min-max-precision-length--secure) - Generates an array of random floating point integers\r\n- [randomize](#randomize-input--secure) - Takes an array or string and randomizes its order\r\n- [selectRandom](#selectrandom-input-length--secure) - Selects elements from an array at random\r\n- [byte](#byte-secure) - Generates a random byte\r\n- [byteString](#bytestring-length--secure) - Generates a string of random bytes\r\n\r\nThe `$secure` parameter on each method is used to temporarily override the secure generator for an insecure one, in a secure instance. (This can be done by setting it to `false`). By default it is set to `true`.\r\n\r\n### integer (_$min_, _$max_ [, _$secure_])\r\nReturns a Number between `$min` & `$max`\r\n\r\n**Parameters**  \r\n- _int_ `$min` (`0`)\r\n\t> Lower Bound of numbers returned\r\n    \r\n- _int_ `$max` (`PHP_INT_MAX`)\r\n    > Upper Bound of numbers returned\r\n\r\n\r\n### float (_$min_, _$max_, _$precision_ [, _$secure_])\r\nReturns a Floating point number between `$min` & `$max`\r\n\r\n**Parameters**  \r\n- _int_ `$min` (`0`)\r\n\t> Lower Bound of numbers returned\r\n    \r\n- _int_ `$max` (`PHP_INT_MAX`)\r\n    > Upper Bound of numbers returned\r\n\r\n- _int_ `$precision` (`4`)\r\n    > Number of decimal digits\r\n\r\n\r\n### boolean ([_$secure_])\r\nReturns a `boolean` value (`true` or `false`)\r\n\r\n\r\n### alpha (_$length_, _$case_randomization_ [, _$secure_])\r\nReturns a string consisting of alphabets\r\n\r\n**Parameters**  \r\n- _int_ `$length` (`32`)\r\n\t> Length of the Random String\r\n    \r\n- _boolean_ `$case_randomization` (`true`)\r\n    > To randomize case or not\r\n\r\n\r\n### alphanum (_$length_, _$case_randomization_ [, _$secure_])\r\nReturns a string consisting of alphabets & numbers\r\n\r\n**Parameters**  \r\n- _int_ `$length` (`32`)\r\n\t> Length of the Random String\r\n    \r\n- _boolean_ `$case_randomization` (`true`)2nd parameter)\r\n    > To randomize case or not\r\n\r\n\r\n### asciiRange (_$length_, _$ranges_ [, _$secure_])\r\nReturns a string consisting of ASCII characters with the the range\r\ndefined by `$ranges`\r\n\r\n**Parameters**  \r\n- _int_ `$length` (`32`)\r\n\t> Length of the Random String\r\n    \r\n- _array_ `$ranges` (`[[65,90],[97,122],[48,57]]`)\r\n    > The Ranges of Character codes in the ASCII table to choose from\r\n    > It could be a single dimensional array with the first value being\r\n    > the starting point and the second being the ending point  \r\n    > eg. `asciiRange(32, [97, 122])` [A-Z]  \r\n    >   \r\n    > **Or**  \r\n    >   \r\n    > It could be a multidimensional array defining a set of ranges like:\r\n    > ```PHP\r\n    > $ranges = [\r\n    >   [65,90],\r\n    >   [97,122],\r\n    >   [48,57]\r\n    > ];\r\n    > \r\n    > asciiRange(32, $ranges)\r\n    > ```\r\n    > The above produces a string consisting of lower case\r\n    > letters, upper case letters and numbers\r\n\r\n\r\n\r\n### string (_$length_, _$charset_ [, _$secure_])\r\nReturns a string consisting of the characters specified in `$charset`\r\n\r\n**Parameters**  \r\n- _int_ `$length` (`32`)\r\n\t> Length of the Random String\r\n    \r\n- _array/string_ `$charset` (`abcdefghijklmopqrstuvwxyz`)\r\n    > An Array or String of characters to be used in the random string\r\n\r\n\r\n### integerArray (_$min_, _$max_, _$length_ [, _$secure_])\r\nReturns an array of random integers\r\n\r\n**Parameters**  \r\n- _int_ `$min` (`0`)\r\n\t> Lower Bound of numbers returned\r\n    \r\n- _int_ `$max` (`PHP_INT_MAX`)\r\n    > Upper Bound of numbers returned\r\n\r\n- _int_ `$length` (`10`)\r\n    > Length of generated Integer Array\r\n\r\n\r\n### floatArray (_$min_, _$max_, _$precision_, _$length_ [, _$secure_])\r\nReturns an array of random floating point numbers\r\n\r\n**Parameters**  \r\n- _int_ `$min` (`0`)\r\n\t> Lower Bound of numbers returned\r\n    \r\n- _int_ `$max` (`PHP_INT_MAX`)\r\n    > Upper Bound of numbers returned\r\n\r\n- _int_ `$precision` (`4`)\r\n    > Number of decimal digits\r\nArray or String\r\n- _int_ `$length` (`10`)\r\n    > Length of generated Integer Array\r\n\r\n\r\n### randomize (_$input_ [, _$secure_])\r\nTakes a Array or String and returns a randomized version of it.\r\n\r\n**Parameters**  \r\n- _array/string_ `$input`\r\n\t> The Array or String to be randomized\r\n\r\n### selectRandom (_$input_, _$length_ [, _$secure_])\r\nSelects random elements from an array or string\r\n\r\n**Parameters**  \r\n- _array/string_ `$input`\r\n\t> The Array or String to be randomly selected from\r\n\r\n- _int_ `$length` (`10`)\r\n\t> Length of generated Array or String\r\n\r\n### byte ([_$secure_])\r\nReturns a Random Byte\r\n\r\n\r\n### byteString (_$length_ [, _$secure_])\r\nReturns a Random String of Bytes\r\n\r\n**Parameters**  \r\n- _int_ `$length` (`32`)\r\n\t> Length of generated Byte String\r\n\r\n\r\n# Initialization Options\r\n### $secure\r\n**type:** `boolean`  \r\n**default:** `true`  \r\nTo use a Cryptographically Secure Generator or not. By default, a CSPRNG\r\nlike `MCrypt` or `OpenSSL` will be used\r\n```PHP\r\n$casus = new Casus(false);\r\n```\r\nThe Above example makes Casus use a Generator that is not cryptographically secure. (It just uses \r\nPHP's built in `mt_rand` function)\r\n\r\n### $generator\r\n**type:** `Generator`  \r\n**default:** `null`  \r\nInjects the Generator Instance to use. (Must be an instance of a child of `\\solidew\\Casus\\Generator`)\r\n```PHP\r\n$generator = new \\solidew\\Casus\\OpenSSL();\r\n$casus = new Casus(true, $generator);\r\n```\r\nThe Above example specifies an instance of the default OpenSSL generator.  \r\n**Note:** If the provided generator is not secure and `$secure` is set to true, Casus will throw an\r\n`\\solidew\\Casus\\errors\\Insecure` Exception.\r\n\r\n#Misc Methods\r\n### isSecure()\r\nReturns: `boolean`  \r\nReturns if the current Generator in use is Secure or not.\r\n\r\n### hasMCrypt()\r\nReturns: `boolean`  \r\nReturns if your PHP installation has the MCrypt extension enabled or not.\r\n\r\n### hasOpenSSL()\r\nReturns: `boolean`  \r\nReturns if your PHP installation has the OpenSSL extension enabled or not.\r\n\r\n### getGenerator()\r\nReturns: `Generator`  \r\nReturns the current Generator Instance in use.\r\n\r\n### setGenerator(_$secure_, _$generator_)\r\nReturns: `boolean`  \r\nSet a new generator based on arguments. (This is actually the method the constructor calls behind the scenes)\r\n\r\nReturns true on success, and throws `solidew\\Casus\\errors\\Insecure` Exception if the first parameter is true but the generator parameter is not a secure generator, or if no secure generator extension was found.\r\n\r\n#Writing Custom Generators\r\n##Creating a Generator\r\nTo create a generator all you have to do is write a class that extends\r\nthe abstract class `\\solidew\\Casus\\Generator`. It is absolutely required that you implement the `integer ($min, $max)` method. (It's already an Abstract Method, so you should get an error in the event that you forget to implement it)\r\n\r\nExample Generator:\r\n```PHP\r\n<?php\r\nclass SuperGenerator extends \\solidew\\Casus\\Generator\r\n{\r\n\tpublic function integer($min, $max)\r\n    {\r\n    \treturn rand($min, $max);\r\n    }\r\n}\r\n```\r\n\r\n##Using your Custom Generator\r\nJust Pass it in as the second parameter of the Casus constructor\r\n```PHP\r\n<?php\r\n$generator = new SuperGenerator();\r\n$casus = new \\solidew\\Casus\\Casus(false, $generator);\r\n```\r\n\r\nOr Just directly instantiate your Generator class (the Casus Main Class is useless anyway, it actually just forwards all the method calls to the generator instance)\r\n```PHP\r\n<?php\r\n$random = new SuperGenerator();\r\n```\r\n**Note:** The Casus main class could be used to enforce secure Generators.\r\n\r\n##Cryptographically Secure?\r\nIf your Generator is Cryptographically Secure (uses an CSPRNG Algorithm) then you have to specify it so that Casus doesn't complain.\r\n\r\nYou can do that simply by setting the `$secure` property in your Generator class to `true` like:\r\n```PHP\r\n<?php\r\nclass SuperGenerator extends \\solidew\\Casus\\Generator\r\n{\r\n\tprotected $secure = true;\r\n    \r\n\tpublic function integer($min, $max)\r\n    {\r\n    \treturn rand($min, $max);\r\n    }\r\n}\r\n```\r\n\r\n##Unit Testing Your Generator\r\nThe simplest way to Unit test your Custom Generator would be to extend the `GeneratorTest` class in Casus's `Tests` directory. The `CeneratorTest` class already extends the `PHPUnit_Framework_TestCase` class so you don't have to.\r\n\r\nYou do have to implement the `setUp()` though so that it sets the `casus` property of the TestClass Object to an instance of your Generator Class.\r\n\r\nExample:\r\n```PHP\r\n<?php\r\ninclude_once __DIR__.'/../vendor/autoload.php';\r\ninclude_once __DIR__.'/GeneratorTest.php';\r\n\r\nclass SuperGeneratorTest extends \\GeneratorTest\r\n{\r\n\tpublic function setUp() {\r\n        $this->casus = new \\AwesomePerson\\SuperGenerator();\r\n    }\r\n}\r\n```\r\n\r\nThis will test all the standard methods that comes packaged with Casus. You could go ahead and add tests for your Special Methods.","google":"UA-51542843-2","note":"Don't delete this file! It's used internally to help with page regeneration."}